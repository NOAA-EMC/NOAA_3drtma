#!/bin/ksh

##########################################################
# This job...
# 
########################################################

date
export PS4=' $SECONDS + ' 
set -x

#######################################################
# The following variable could be defined in the
# submission script (the ecf script), if
# not they will take the default values which is set
# for the NCO running enviroment
#######################################################
export RUN_ENVIR=${RUN_ENVIR:-nco}

#################
# Set NET and RUN
#################
export NET=rtma3d
export RUN=rtma3d

# Note: grib_util module loaded in submission (lsf or ecFlow) script

##########################################################
# obtain unique process id (pid) and make temp directories



##########################################################
export jobid=${jobid:-"${outid}.o$$"}
export DATA=${DATA:-$DATAROOT/${jobid:?}} #jobid ($job.$LSB_JOBID MUST BE DEFINED IN TERMS OF $RUN IN UPPER LEVEL SCRIPT /MPondeca, 26Jul2015
if [ -d $DATA ] ; then
   rm  -rf $DATA/*
else
   mkdir -p $DATA
fi
cd $DATA

export PDYm1=`$NDATE -24 ${PDY}${cyc} | cut -c 1-8`

if [[ "${subcyc}" == "-1" ]]; then #it's hourly run
  export cycle=${cycle:-t${cyc}z}
  export pgmout=${pgmout:-"OUTPUT.${PDY}${cyc}.${jobid}"}
else
  export cycle=${cycle:-t${cyc}${subcyc}z}
  export pgmout=${pgmout:-"OUTPUT.${PDY}${cyc}${subcyc}.${jobid}"}
fi

export subcyc=${subcyc} #Note: Must define subcyc in upper level script. Can be 00, 15, 30, or 45 /MPondeca, 30Jun2017
                         #only used for rurtma2p5

export jlogfile=${jlogfile:-$COMROOT/logs/jlogfiles/jlogfile.$jobid}
####################################
# Determine Job Output Name on Sstem
####################################
export LOG_JJOB=${LOG_JJOB:-$COMROOT/logs/jlogfiles}
export jlogfile=${jlogfile:-$LOG_JJOB/jlogfile.${jobid}}
if [ ! -d ${LOG_JJOB} ] ; then
   mkdir -p ${LOG_JJOB}
fi
if [ ! -d ${LOG_PGMOUT} ] ; then
   mkdir -p ${LOG_PGMOUT}
fi

# specify the file head for the file names of the archived data files
export PROD_HEAD=${PROD_HEAD:-"${RUN}.${cycle}"}


# Specify Execution Areas
export HOMErtma3d=${HOMErtma3d:-$NWROOT/rtma.${rtma_ver}}
export EXECrtma3d=${EXECrtma3d:-$HOMErtma3d/exec}
export FIXrtma3d=${FIXrtma3d:-$HOMErtma3d/fix/${RUN}}
export PARMrtma3d=${PARMrtma3d:-$HOMErtma3d/parm/${RUN}}
export USHrtma3d=${USHrtma3d:-$HOMErtma3d/ush/${RUN}}
export UTILrtma3d=${UTILrtma3d:-$HOMErtma3d/util/${RUN}}

# date and time for previous and next cycle
export PDYHH="${PDY}${cyc}"
export PDYHH_cycm1=$($NDATE -01  "${PDYHH}")
export PDYHH_cycp1=$($NDATE +01  "${PDYHH}")
export FGS_OPT=${FGS_OPT:-1}


###########################################
# Run setpdy and initialize PDY variables
###########################################

if [ ${cyc}${subcyc} != "1900" ] ; then
    echo -e "\nWARNING: GETMINT only runs at 1900z. Exiting.\n"
    exit 0
fi


# If it has not been at least 24 hours since the last coldstart, exit processing
#if [ -n "$LAST_RESTART" ] && [ ${PDY}${cyc} -lt $(${NDATE:?} +24 $LAST_RESTART) ]; then
#    echo -e "\nWARNING: Cold restart is in process. GETMINT WILL NOT RUN!\n"
#    exit 0
#fi

#################################################
# Set up the INPUT and OUTPUT directories
#################################################
### COM_IN used to retrieve ges and analysis files from 2p5, ak, gu, hi, and pr
export COMIN=${COMIN:-${COMROOT}/${NET}/${envir}/${RUN}.${PDY}}
export COMINm1=${COMINm1:-${COMROOT}/${NET}/${envir}/${RUN}.${PDYm1}}
export COMOUT=${COMOUT:-${COMROOT}/${NET}/${envir}/${RUN}.${PDY}}

### Observations Products/Input for the RTMA3D (prepbufr files) 
export COMINobsproc_rtma3d=${COMINobsproc_rtma3d:-"${COMIN}/obsprd.${cycle}"}
export COMINobsproc_rtma3dm1=${COMINobsproc_rtma3dm1:-"${COMINm1}/obsprd.${cycle}"}

### Firstguess Products/Input for the RTMA3D (netcdf) 
export GESINhrrr_rtma3d=${GESINhrrr_rtma3d:-"${COMIN}/fgsprd.${cycle}"}

### 3DRTMA GSIANL Products (netcdf)
export COMOUTgsi_rtma3d=${COMOUTgsi_rtma3d:-"${COMOUT}/gsiprd.${cycle}"}

### 3DRTMA UNI-POST Products (grib2)
export COMOUTpost_rtma3d=${COMOUTpost_rtma3d:-"${COMOUT}/postprd.${cycle}"}

### 3DRTMA MIN Products (grib2)
#export COMOUTmintmaxrh_rtma3d=${COMOUTmintmaxrh_rtma3d:-"${COMOUT}/mintmaxrhprd.${cycle}"}


if [ ! -d "${COMIN}" ] ; then
   mkdir -p $COMIN
fi
if [ ! -d "${COMOUT}" ] ; then
   mkdir -p $COMOUT
fi
#if [ ! -d "${COMOUTmintmaxrh_rtma3d}" ] ; then
#   mkdir -p ${COMOUTmintmaxrh_rtma3d}
#fi

#if [ ! -d "${COMOUTmintmaxrh_rtma3d}" ] ; then
#   mkdir -p ${COMOUTmintmaxrh_rtma3d}
#fi


#export DATA_RUNDIR=${DATA_RUNDIR:-"${DATAROOT}/${envir}/${RUN}.${PDY}${cyc}${subcyc}"}
#if [ ! -d "${DATA_RUNDIR}" ] ; then
#      mkdir -p ${DATA_RUNDIR}
#fi
#export DATA_MINTMAXRH=${DATA_MINTMAXRH:-"${DATA_RUNDIR}/mintmaxrhprd"}
#${RM} -rf ${DATA_MINTMAXRH}
#${LN} -s  ${DATA}  ${DATA_MINTMAXRH}

export COM_IN=${COM_IN:-$COMROOT/${NET}/${envir}}
#export COMOUT=${COM_OUT:-$COMROOT/${NET}/${envir}}/urma.${PDY}
#export COMOUT2p5=${COM_OUT:-$COMROOT/${NET}/${envir}}/urma2p5.${PDY}
#export COMOUTak=${COM_OUT:-$COMROOT/${NET}/${envir}}/akurma.${PDY}
#export COMOUThi=${COM_OUT:-$COMROOT/${NET}/${envir}}/hiurma.${PDY}
#export COMOUTpr=${COM_OUT:-$COMROOT/${NET}/${envir}}/prurma.${PDY}
#export DATA_MINT_PREP=${DATA_MINT_PREP:-$DATAROOT/wrkdir_mint_prep.${PDY}${cyc}}
### Input from the URMA for the prepbufr and previous guess files:
#export COMINobsproc_urma=${COMINobsproc_urma:-$(compath.py urma/${envir}/urma.${PDY})}

#mkdir -p $COMOUT $DATA_MINT_PREP

#env

######################
# Execute the script.
######################
#${exSCR_POST:-$HOMErtma3d/scripts/ex${RUN}_mintobs.ksh}
#export err=$?; err_chk

#msg="$0 of $job completed normally"
#postmsg $jlogfile "$msg"

${exSCR_POST:-$HOMErtma3d/scripts/ex${RUN}_mintbg.ksh}
export err=$?; err_chk

msg="$0 of $job completed normally"
postmsg $jlogfile "$msg"

${exSCR_POST:-$HOMErtma3d/scripts/ex${RUN}_maxrh.ksh}
export err=$?; err_chk

msg="$0 of $job completed normally"
postmsg $jlogfile "$msg"

if [ -e "${pgmout}" ] ; then
   cat $pgmout
   cp -p $pgmout ${LOG_PGMOUT}
fi

postmsg $jlogfile "$0 of $job completed normally"

if [ "${KEEPDATA}" != YES ]; then
    rm -rf $DATA
fi

date
